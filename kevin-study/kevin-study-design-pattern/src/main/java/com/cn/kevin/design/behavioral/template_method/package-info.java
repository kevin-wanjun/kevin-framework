/**
 * 设计模式之模板方法模式（Template Method）
 *
 * 概述:
 * 模板方法模式是类的行为模式。准备一个抽象类，将部分逻辑以具体方法以及具体构造函数的形式实现，然后声明一些抽象方法来迫使子类实现剩余的逻辑。
 * 不同的子类可以以不同的方式实现这些抽象方法，从而对剩余的逻辑有不同的实现。这就是模板方法模式的用意。
 * 比如定义一个操作中的算法的骨架，将步骤延迟到子类中。模板方法使得子类能够不去改变一个算法的结构即可重定义算法的某些特定步骤。
 * 模式中的角色:
 *  1、抽象方法：由抽象类声明，用abstract关键字标识，由具体实现类去实现。
 *  2、具体方法：由抽象类声明并实现，用final关键字标识，在具体实现类中只能调用。
 *  3、钩子方法：由抽象类声明并实现，具体实现类可以继承抽象父类的默认实现，也可以根据具体情况进行修改扩展。
 *
 * 钩子方法经常是一个空的实现，因为一个实现类并不需要全部的方法，
 * 比如HttpServlet类中的doPost()、doGet()、doPut()、doDelete()、doHead()……为处理HTTP请求，
 * 每一种HTTP方法对应着一个do方法，这也是钩子方法默认的命名规则。这些方法在HttpServlet抽象类中都是以空实现的钩子方法存在的。
 * 在具体实现的时候，一般一个Servlet只需要处理某几个HTTP方法，在具体的servlet中就重写对应的几个do方法就可以了。
 *
 * 钩子方法和具体方法的存在使抽象类与接口具有了最主要的差异：
 * 接口主要体现的是一种规范，实现接口的类只能去实现这种规范，但用户通过与统一接口对接实现了规范与实现的分离，极大地降低了模块间的耦合度；
 * 而通过模板方法模式使用抽象类，可以继承某些具体方法，实现了规范并增加了代码的可重用性，而继承抽象方法与钩子方法使实现类可以灵活地扩展抽象模板类，
 * 接口并不能有这样的灵活扩展特性，是非常常用而有意义的一种设计模式！
 *
 * @author wj
 * @Description 模板方法模式
 * @date 2015-01-12
 */
package com.cn.kevin.design.behavioral.template_method;